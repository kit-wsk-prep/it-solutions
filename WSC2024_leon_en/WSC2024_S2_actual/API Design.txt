API Endpoint: /api/customers

Methods:
- GET: Retrieve customer information
- POST: Create a new customer
- PUT: Update an existing customer
- DELETE: Delete a customer

Request Parameters:
- GET:
  - id (optional, integer): If provided, returns details of a specific customer
- POST/PUT:
  - FirstName (string, required, max 50 characters)
  - LastName (string, required, max 50 characters)
  - Email (string, required, max 100 characters, must be unique)
  - Phone (string, optional, max 20 characters)
  - LoyaltyPoints (integer, optional, non-negative)
  - RegistrationDate (date, required, YYYY-MM-DD format)
- DELETE:
  - id (integer, required): The ID of the customer to delete

Response Data (JSON):
- GET (all customers):
[
  {
    "CustomerID": 1,
    "FirstName": "John",
    "LastName": "Doe",
    "Email": "john@example.com",
    "Phone": "+33123456789",
    "LoyaltyPoints": 100,
    "RegistrationDate": "2023-01-15"
  },
  {
    "CustomerID": 2,
    "FirstName": "Jane",
    "LastName": "Smith",
    "Email": "jane@example.com",
    "Phone": "+33987654321",
    "LoyaltyPoints": 150,
    "RegistrationDate": "2023-02-20"
  }
]

- GET (single customer), POST, PUT:
{
  "CustomerID": 1,
  "FirstName": "John",
  "LastName": "Doe",
  "Email": "john@example.com",
  "Phone": "+33123456789",
  "LoyaltyPoints": 100,
  "RegistrationDate": "2023-01-15"
}

Error Handling:
- 400 Bad Request: Invalid input parameters or data types
- 404 Not Found: Customer not found (for GET, PUT, DELETE with specific ID)
- 409 Conflict: Email already exists (for POST and PUT)
- 500 Internal Server Error: Unexpected server error

Additional Notes:
1. Implement proper authentication and authorization.
2. Use HTTPS for secure data transmission.
3. Implement input validation for all fields.
4. Support pagination for GET requests returning multiple customers.
5. Implement CORS policies to control API access.
6. Consider versioning the API (e.g., /api/v1/customers) for future updates.